/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from "@tanstack/react-query";
import {
  useBackendContext,
  BackendContext,
  queryKeyFn,
} from "./backendContext";
import type * as Fetcher from "./backendFetcher";
import { backendFetch } from "./backendFetcher";
import type * as Schemas from "./backendSchemas";

export type GetNewsError = Fetcher.ErrorWrapper<undefined>;

export type GetNewsVariables = {
  body?: Schemas.GetNewsRequest;
} & BackendContext["fetcherOptions"];

export const fetchGetNews = (
  variables: GetNewsVariables,
  signal?: AbortSignal,
) =>
  backendFetch<
    Schemas.GetNewsResponse,
    GetNewsError,
    Schemas.GetNewsRequest,
    {},
    {},
    {}
  >({ url: "/api/News", method: "post", ...variables, signal });

export const useGetNews = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GetNewsResponse,
      GetNewsError,
      GetNewsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useBackendContext();
  return reactQuery.useMutation<
    Schemas.GetNewsResponse,
    GetNewsError,
    GetNewsVariables
  >({
    mutationFn: (variables: GetNewsVariables) =>
      fetchGetNews({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type QueryOperation = {
  path: string;
  operationId: never;
  variables: unknown;
};
