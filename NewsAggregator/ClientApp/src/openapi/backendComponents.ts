/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useBackendContext, BackendContext } from "./backendContext";
import type * as Fetcher from "./backendFetcher";
import { backendFetch } from "./backendFetcher";
import type * as Schemas from "./backendSchemas";

export type GetNewsQueryParams = {
  /**
   * `true` if latest news shall be returned, `false` otherwise. Default is `true`.
   */
  isLatest?: boolean;
};

export type GetNewsError = Fetcher.ErrorWrapper<undefined>;

export type GetNewsResponse = Schemas.News[];

export type GetNewsVariables = {
  queryParams?: GetNewsQueryParams;
} & BackendContext["fetcherOptions"];

export const fetchGetNews = (variables: GetNewsVariables) =>
  backendFetch<
    GetNewsResponse,
    GetNewsError,
    undefined,
    {},
    GetNewsQueryParams,
    {}
  >({ url: "/api/News", method: "get", ...variables });

export const useGetNews = <TData = GetNewsResponse>(
  variables: GetNewsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetNewsResponse, GetNewsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useBackendContext(options);
  return reactQuery.useQuery<GetNewsResponse, GetNewsError, TData>(
    queryKeyFn({ path: "/api/News", operationId: "getNews", variables }),
    () => fetchGetNews({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type QueryOperation = {
  path: "/api/News";
  operationId: "getNews";
  variables: GetNewsVariables;
};
